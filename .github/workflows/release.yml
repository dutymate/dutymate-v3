name: Release

on:
  push:
    branches:
      - 'release*'

jobs:
  ecr-login:
    runs-on: ubuntu-latest
    outputs:
      ecr-password: ${{ steps.login.outputs.password-file }}
    steps:
      - uses: actions/checkout@v4
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ECR_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_ECR_SECRET_KEY }}
          aws-region: ${{ secrets.AWS_DEFAULT_REGION }}
      - name: Login to ECR
        id: login
        run: |
          aws ecr get-login-password --region ${{ secrets.AWS_DEFAULT_REGION }} > password.txt
          echo "password-file=password.txt" >> $GITHUB_OUTPUT
      - name: Upload ECR password
        uses: actions/upload-artifact@v4
        with:
          name: ecr-password
          path: password.txt

  publish-backend:
    runs-on: ubuntu-latest
    needs: ecr-login
    services:
      docker:
        image: docker:20.10.24-dind
        options: --privileged
    steps:
      - uses: actions/checkout@v4
      - uses: actions/download-artifact@v4
        with:
          name: ecr-password
      - uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'
      - name: Build and Push with Jib
        run: |
          cd backend
          ./gradlew jib -Djib.to.image=${{ secrets.AWS_ECR_REPO_URI }} -Djib.to.auth.username=AWS -Djib.to.auth.password=$(cat ../password.txt)

  deploy-backend:
    runs-on: ubuntu-latest
    needs: publish-backend
    steps:
      - uses: actions/checkout@v4
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ECS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_ECS_SECRET_KEY }}
          aws-region: ${{ secrets.AWS_DEFAULT_REGION }}
      - name: Deploy to ECS
        run: |
          aws ecs update-service --cluster ${{ secrets.AWS_ECS_CLUSTER_NAME }} --service ${{ secrets.AWS_ECS_SERVICE_NAME }} --force-new-deployment

  build-frontend:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 22
      - name: Copy env file
        run: |
          cd frontend
          echo "${{ secrets.FRONTEND_ENV_FILE }}" > .env
      - name: Install dependencies
        run: |
          cd frontend
          npm ci
      - name: Build
        run: |
          cd frontend
          npm run build
      - name: Upload dist
        uses: actions/upload-artifact@v4
        with:
          name: frontend-dist
          path: frontend/dist

  deploy-frontend:
    runs-on: ubuntu-latest
    needs: build-frontend
    steps:
      - uses: actions/checkout@v4
      - uses: actions/download-artifact@v4
        with:
          name: frontend-dist
          path: frontend/dist
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_FRONTEND_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_FRONTEND_SECRET_KEY }}
          aws-region: ${{ secrets.AWS_DEFAULT_REGION }}
      - name: Get CloudFront Distribution ID
        id: cloudfront
        run: |
          export AWS_CLOUDFRONT_DISTRIBUTION_ID=$(aws cloudfront list-distributions --query "DistributionList.Items[?Origins.Items[?DomainName=='${{ secrets.AWS_FRONTEND_BUCKET_NAME }}.s3.${{ secrets.AWS_DEFAULT_REGION }}.amazonaws.com']].Id" --output text)
          echo "id=$AWS_CLOUDFRONT_DISTRIBUTION_ID" >> $GITHUB_OUTPUT
      - name: Deploy to S3
        run: aws s3 sync frontend/dist s3://${{ secrets.AWS_FRONTEND_BUCKET_NAME }} --delete
      - name: Invalidate CloudFront
        run: aws cloudfront create-invalidation --distribution-id ${{ steps.cloudfront.outputs.id }} --paths "/*"
